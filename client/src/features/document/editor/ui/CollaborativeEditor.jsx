import React, { useState, useEffect, useRef } from "react";
import { socket } from "../../../../shared/api/socket";

const CollaborativeEditor = ({ documentId, onSave }) => {
    const [content, setContent] = useState("Loading content...");
    const [isConnected, setIsConnected] = useState(socket.connected);
    const saveTimeoutRef = useRef(null);

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    useEffect(() => {
        console.log(`[EDITOR] useEffect with fetch triggered for documentId: ${documentId}`);
        let isMounted = true;

        // --- –ò–°–ü–û–õ–¨–ó–£–ï–ú FETCH –í–ú–ï–°–¢–û AXIOS ---
        const fetchDocumentWithFetch = async () => {
            try {
                // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–∞—à interceptor
                const token = localStorage.getItem("token");
                if (!token) {
                    throw new Error("No token found");
                }

                // 2. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                const headers = {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                };

                // 3. –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
                const response = await fetch(`http://localhost:5000/api/documents/${documentId}`, {
                    method: "GET",
                    headers: headers,
                });

                // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π (—Å—Ç–∞—Ç—É—Å 200-299)
                if (!response.ok) {
                    // –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –æ—à–∏–±–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞
                    throw new Error(`Network response was not ok: ${response.statusText}`);
                }

                // 5. –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                const data = await response.json();

                // 6. –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –≤—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                console.log("[EDITOR] SUCCESS with fetch: Received data:", data);
                if (isMounted) {
                    setContent(data.content || "");
                }
            } catch (error) {
                // 7. –õ–æ–≤–∏–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ (—Å–µ—Ç—å, –ø–∞—Ä—Å–∏–Ω–≥, —Å—Ç–∞—Ç—É—Å)
                console.error("[EDITOR] CATCH with fetch: Failed to fetch document.", error);
                if (isMounted) {
                    setContent("Error: Could not load document.");
                }
            }
        };

        fetchDocumentWithFetch();

        return () => {
            isMounted = false;
        };
    }, [documentId]);

    // --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–ö–ï–¢–ê–ú–ò (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ---
    useEffect(() => {
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        const setupSocketListeners = () => {
            socket.on("connect", () => {
                console.log("‚úÖ Socket connected!");
                setIsConnected(true);
                // –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å—Ä–∞–∑—É –∂–µ –≤—Å—Ç—É–ø–∞–µ–º –≤ –∫–æ–º–Ω–∞—Ç—É
                socket.emit("join_document", documentId);
            });

            socket.on("disconnect", () => {
                console.log("‚ùå Socket disconnected!");
                setIsConnected(false);
            });

            socket.on("receive_document_change", (receivedContent) => {
                console.log("üîÑ Received change from another user:", receivedContent);
                setContent(receivedContent);
            });
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        const cleanupSocketListeners = () => {
            socket.off("connect");
            socket.off("disconnect");
            socket.off("receive_document_change");
        };

        // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º
        if (!socket.connected) {
            socket.connect();
        } else {
            // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ hot-reload), –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç—É–ø–∞–µ–º –≤ –∫–æ–º–Ω–∞—Ç—É
            socket.emit("join_document", documentId);
        }

        setupSocketListeners();

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        return () => {
            console.log("Cleaning up socket listeners and disconnecting...");
            cleanupSocketListeners();
            socket.disconnect();
        };
    }, [documentId]);

    const handleChange = (e) => {
        const newContent = e.target.value;
        setContent(newContent);
        socket.emit("document_change", { documentId, newContent });

        if (saveTimeoutRef.current) {
            clearTimeout(saveTimeoutRef.current);
        }
        saveTimeoutRef.current = setTimeout(() => {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º `documentId` –∏–∑ props, –∞ –Ω–µ `newContent`
            onSave(documentId, newContent);
        }, 2000);
    };

    return (
        <div>
            <div style={{ marginBottom: "10px" }}>
                Status: {isConnected ? <span style={{ color: "green" }}>Connected</span> : <span style={{ color: "red" }}>Disconnected</span>}
            </div>
            <textarea
                value={content}
                onChange={handleChange}
                className="collaborative-textarea" // –°—Ç–∏–ª–∏–∑—É–π—Ç–µ –ø–æ –≤–∫—É—Å—É
                rows="20"
            />
        </div>
    );
};

export default CollaborativeEditor;
